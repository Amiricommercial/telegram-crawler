/* tslint:disable */

/* eslint-disable */

/**
 * events_gateway/events_gateway.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosInstance,
  AxiosPromise,
  AxiosRequestConfig,
} from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequestArgs,
  RequiredError,
} from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface EventsGatewayGenericEvent
 */
export interface EventsGatewayGenericEvent {
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof EventsGatewayGenericEvent
   */
  version?: number;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  traceId?: string;
  /**
   *
   * @type {{ [key: string]: EventsGatewayProperty; }}
   * @memberof EventsGatewayGenericEvent
   */
  eventProperties?: { [key: string]: EventsGatewayProperty };
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  clientTime?: string;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayGenericEvent
   */
  idempotencyKey?: string;
  /**
   *
   * @type {boolean}
   * @memberof EventsGatewayGenericEvent
   */
  unsafe?: boolean;
}
/**
 *
 * @export
 * @interface EventsGatewayNewEventsRequest
 */
export interface EventsGatewayNewEventsRequest {
  /**
   *
   * @type {Array<EventsGatewayGenericEvent>}
   * @memberof EventsGatewayNewEventsRequest
   */
  events?: Array<EventsGatewayGenericEvent>;
}
/**
 *
 * @export
 * @interface EventsGatewayNewEventsResponse
 */
export interface EventsGatewayNewEventsResponse {
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof EventsGatewayNewEventsResponse
   */
  fails?: { [key: string]: string };
}
/**
 *
 * @export
 * @interface EventsGatewayProperty
 */
export interface EventsGatewayProperty {
  /**
   *
   * @type {string}
   * @memberof EventsGatewayProperty
   */
  value?: string;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayProperty
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof EventsGatewayProperty
   */
  kind?: string;
}
/**
 *
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
  [key: string]: object | any;

  /**
   *
   * @type {string}
   * @memberof ProtobufAny
   */
  '@type'?: string;
}
/**
 *
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
  /**
   *
   * @type {number}
   * @memberof RpcStatus
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof RpcStatus
   */
  message?: string;
  /**
   *
   * @type {Array<ProtobufAny>}
   * @memberof RpcStatus
   */
  details?: Array<ProtobufAny>;
}

/**
 * EventsGatewayApi - axios parameter creator
 * @export
 */
export const EventsGatewayApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Registrate new events with batch
     * @param {EventsGatewayNewEventsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsGatewayNewEvents: async (
      body: EventsGatewayNewEventsRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('eventsGatewayNewEvents', 'body', body);
      const localVarPath = `/v1/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EventsGatewayApi - functional programming interface
 * @export
 */
export const EventsGatewayApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    EventsGatewayApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Registrate new events with batch
     * @param {EventsGatewayNewEventsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventsGatewayNewEvents(
      body: EventsGatewayNewEventsRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<EventsGatewayNewEventsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.eventsGatewayNewEvents(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * EventsGatewayApi - factory interface
 * @export
 */
export const EventsGatewayApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EventsGatewayApiFp(configuration);
  return {
    /**
     *
     * @summary Registrate new events with batch
     * @param {EventsGatewayNewEventsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsGatewayNewEvents(
      body: EventsGatewayNewEventsRequest,
      options?: any,
    ): AxiosPromise<EventsGatewayNewEventsResponse> {
      return localVarFp
        .eventsGatewayNewEvents(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EventsGatewayApi - object-oriented interface
 * @export
 * @class EventsGatewayApi
 * @extends {BaseAPI}
 */
export class EventsGatewayApi extends BaseAPI {
  /**
   *
   * @summary Registrate new events with batch
   * @param {EventsGatewayNewEventsRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsGatewayApi
   */
  public eventsGatewayNewEvents(
    body: EventsGatewayNewEventsRequest,
    options?: AxiosRequestConfig,
  ) {
    return EventsGatewayApiFp(this.configuration)
      .eventsGatewayNewEvents(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
