/* tslint:disable */

/* eslint-disable */

/**
 * SCW Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosInstance,
  AxiosPromise,
  AxiosRequestConfig,
} from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequestArgs,
  RequiredError,
} from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface AddressInfo
 */
export interface AddressInfo {
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  externalId?: string;
}
/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  detail: string;
}
/**
 *
 * @export
 * @interface BackupAddressRequest
 */
export interface BackupAddressRequest {
  /**
   *
   * @type {string}
   * @memberof BackupAddressRequest
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof BackupAddressRequest
   */
  encryptedBackupShard: string;
}
/**
 *
 * @export
 * @interface BackupAddressResponse
 */
export interface BackupAddressResponse {
  /**
   *
   * @type {string}
   * @memberof BackupAddressResponse
   */
  addressExternalId: string;
}
/**
 *
 * @export
 * @interface CodedResponse
 */
export interface CodedResponse {
  /**
   *
   * @type {string}
   * @memberof CodedResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof CodedResponse
   */
  detail: string;
}
/**
 *
 * @export
 * @interface ConfirmBackupRequest
 */
export interface ConfirmBackupRequest {
  /**
   *
   * @type {string}
   * @memberof ConfirmBackupRequest
   */
  externalId: string;
}
/**
 *
 * @export
 * @interface ConfirmBackupResponse
 */
export interface ConfirmBackupResponse {
  /**
   *
   * @type {boolean}
   * @memberof ConfirmBackupResponse
   */
  success: boolean;
}
/**
 *
 * @export
 * @interface GetAddressResponse
 */
export interface GetAddressResponse {
  /**
   *
   * @type {string}
   * @memberof GetAddressResponse
   */
  address: string;
}
/**
 *
 * @export
 * @interface GetAddressesResponse
 */
export interface GetAddressesResponse {
  /**
   *
   * @type {Array<AddressInfo>}
   * @memberof GetAddressesResponse
   */
  actives: Array<AddressInfo>;
  /**
   *
   * @type {Array<AddressInfo>}
   * @memberof GetAddressesResponse
   */
  backups: Array<AddressInfo>;
}
/**
 *
 * @export
 * @interface ProcessStatusResponse
 */
export interface ProcessStatusResponse {
  /**
   *
   * @type {number}
   * @memberof ProcessStatusResponse
   */
  masterchainSeqno: number;
  /**
   *
   * @type {number}
   * @memberof ProcessStatusResponse
   */
  processedSeqno: number;
  /**
   *
   * @type {number}
   * @memberof ProcessStatusResponse
   */
  seqnoBehind: number;
  /**
   *
   * @type {number}
   * @memberof ProcessStatusResponse
   */
  secondsSinceLastUpdate: number;
}
/**
 *
 * @export
 * @interface RecoverAddressRequest
 */
export interface RecoverAddressRequest {
  /**
   *
   * @type {string}
   * @memberof RecoverAddressRequest
   */
  address: string;
}
/**
 *
 * @export
 * @interface RecoverAddressResponse
 */
export interface RecoverAddressResponse {
  /**
   *
   * @type {string}
   * @memberof RecoverAddressResponse
   */
  addressExternalId: string;
  /**
   *
   * @type {string}
   * @memberof RecoverAddressResponse
   */
  encryptedBackupShard: string;
}
/**
 *
 * @export
 * @interface RemoveAddressRequest
 */
export interface RemoveAddressRequest {
  /**
   *
   * @type {string}
   * @memberof RemoveAddressRequest
   */
  address: string;
}
/**
 *
 * @export
 * @interface RemoveAddressResponse
 */
export interface RemoveAddressResponse {
  /**
   *
   * @type {boolean}
   * @memberof RemoveAddressResponse
   */
  success: boolean;
}
/**
 *
 * @export
 * @interface UpsertAddressRequest
 */
export interface UpsertAddressRequest {
  /**
   *
   * @type {string}
   * @memberof UpsertAddressRequest
   */
  address: string;
}
/**
 *
 * @export
 * @interface UpsertAddressResponse
 */
export interface UpsertAddressResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpsertAddressResponse
   */
  success: boolean;
}

/**
 * AddressesApi - axios parameter creator
 * @export
 */
export const AddressesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Backup Address
     * @param {BackupAddressRequest} backupAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupAddress: async (
      backupAddressRequest: BackupAddressRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'backupAddressRequest' is not null or undefined
      assertParamExists(
        'backupAddress',
        'backupAddressRequest',
        backupAddressRequest,
      );
      const localVarPath = `/adresses/backup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        backupAddressRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddress: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/adresses/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddresses: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/adresses/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Recover Address
     * @param {RecoverAddressRequest} recoverAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverAddress: async (
      recoverAddressRequest: RecoverAddressRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'recoverAddressRequest' is not null or undefined
      assertParamExists(
        'recoverAddress',
        'recoverAddressRequest',
        recoverAddressRequest,
      );
      const localVarPath = `/adresses/recover`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        recoverAddressRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove Address
     * @param {RemoveAddressRequest} removeAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddress: async (
      removeAddressRequest: RemoveAddressRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'removeAddressRequest' is not null or undefined
      assertParamExists(
        'removeAddress',
        'removeAddressRequest',
        removeAddressRequest,
      );
      const localVarPath = `/adresses/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        removeAddressRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upsert Address
     * @param {UpsertAddressRequest} upsertAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertAddress: async (
      upsertAddressRequest: UpsertAddressRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'upsertAddressRequest' is not null or undefined
      assertParamExists(
        'upsertAddress',
        'upsertAddressRequest',
        upsertAddressRequest,
      );
      const localVarPath = `/adresses/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication WalletAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Wallet-Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        upsertAddressRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AddressesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Backup Address
     * @param {BackupAddressRequest} backupAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async backupAddress(
      backupAddressRequest: BackupAddressRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BackupAddressResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.backupAddress(
        backupAddressRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAddress(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAddressResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAddresses(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAddressesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAddresses(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Recover Address
     * @param {RecoverAddressRequest} recoverAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recoverAddress(
      recoverAddressRequest: RecoverAddressRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RecoverAddressResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.recoverAddress(
        recoverAddressRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Remove Address
     * @param {RemoveAddressRequest} removeAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeAddress(
      removeAddressRequest: RemoveAddressRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RemoveAddressResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeAddress(
        removeAddressRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Upsert Address
     * @param {UpsertAddressRequest} upsertAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async upsertAddress(
      upsertAddressRequest: UpsertAddressRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UpsertAddressResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upsertAddress(
        upsertAddressRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AddressesApiFp(configuration);
  return {
    /**
     *
     * @summary Backup Address
     * @param {BackupAddressRequest} backupAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupAddress(
      backupAddressRequest: BackupAddressRequest,
      options?: any,
    ): AxiosPromise<BackupAddressResponse> {
      return localVarFp
        .backupAddress(backupAddressRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddress(options?: any): AxiosPromise<GetAddressResponse> {
      return localVarFp
        .getAddress(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddresses(options?: any): AxiosPromise<GetAddressesResponse> {
      return localVarFp
        .getAddresses(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Recover Address
     * @param {RecoverAddressRequest} recoverAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverAddress(
      recoverAddressRequest: RecoverAddressRequest,
      options?: any,
    ): AxiosPromise<RecoverAddressResponse> {
      return localVarFp
        .recoverAddress(recoverAddressRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove Address
     * @param {RemoveAddressRequest} removeAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddress(
      removeAddressRequest: RemoveAddressRequest,
      options?: any,
    ): AxiosPromise<RemoveAddressResponse> {
      return localVarFp
        .removeAddress(removeAddressRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upsert Address
     * @param {UpsertAddressRequest} upsertAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertAddress(
      upsertAddressRequest: UpsertAddressRequest,
      options?: any,
    ): AxiosPromise<UpsertAddressResponse> {
      return localVarFp
        .upsertAddress(upsertAddressRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
  /**
   *
   * @summary Backup Address
   * @param {BackupAddressRequest} backupAddressRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public backupAddress(
    backupAddressRequest: BackupAddressRequest,
    options?: AxiosRequestConfig,
  ) {
    return AddressesApiFp(this.configuration)
      .backupAddress(backupAddressRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Address
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public getAddress(options?: AxiosRequestConfig) {
    return AddressesApiFp(this.configuration)
      .getAddress(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Addresses
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public getAddresses(options?: AxiosRequestConfig) {
    return AddressesApiFp(this.configuration)
      .getAddresses(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Recover Address
   * @param {RecoverAddressRequest} recoverAddressRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public recoverAddress(
    recoverAddressRequest: RecoverAddressRequest,
    options?: AxiosRequestConfig,
  ) {
    return AddressesApiFp(this.configuration)
      .recoverAddress(recoverAddressRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove Address
   * @param {RemoveAddressRequest} removeAddressRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public removeAddress(
    removeAddressRequest: RemoveAddressRequest,
    options?: AxiosRequestConfig,
  ) {
    return AddressesApiFp(this.configuration)
      .removeAddress(removeAddressRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upsert Address
   * @param {UpsertAddressRequest} upsertAddressRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AddressesApi
   */
  public upsertAddress(
    upsertAddressRequest: UpsertAddressRequest,
    options?: AxiosRequestConfig,
  ) {
    return AddressesApiFp(this.configuration)
      .upsertAddress(upsertAddressRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Confirm Backup
     * @param {ConfirmBackupRequest} confirmBackupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmAddressBackup: async (
      confirmBackupRequest: ConfirmBackupRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'confirmBackupRequest' is not null or undefined
      assertParamExists(
        'confirmAddressBackup',
        'confirmBackupRequest',
        confirmBackupRequest,
      );
      const localVarPath = `/clients/backups/confirm`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ClientAuthHeader required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Client-Authorization',
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        confirmBackupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Confirm Backup
     * @param {ConfirmBackupRequest} confirmBackupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirmAddressBackup(
      confirmBackupRequest: ConfirmBackupRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ConfirmBackupResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.confirmAddressBackup(
          confirmBackupRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ClientsApiFp(configuration);
  return {
    /**
     *
     * @summary Confirm Backup
     * @param {ConfirmBackupRequest} confirmBackupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmAddressBackup(
      confirmBackupRequest: ConfirmBackupRequest,
      options?: any,
    ): AxiosPromise<ConfirmBackupResponse> {
      return localVarFp
        .confirmAddressBackup(confirmBackupRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
  /**
   *
   * @summary Confirm Backup
   * @param {ConfirmBackupRequest} confirmBackupRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientsApi
   */
  public confirmAddressBackup(
    confirmBackupRequest: ConfirmBackupRequest,
    options?: AxiosRequestConfig,
  ) {
    return ClientsApiFp(this.configuration)
      .confirmAddressBackup(confirmBackupRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/status/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatus(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodedResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StatusApiFp(configuration);
  return {
    /**
     *
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus(options?: any): AxiosPromise<CodedResponse> {
      return localVarFp
        .getStatus(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
  /**
   *
   * @summary Get Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusApi
   */
  public getStatus(options?: AxiosRequestConfig) {
    return StatusApiFp(this.configuration)
      .getStatus(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TonApi - axios parameter creator
 * @export
 */
export const TonApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Ton Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tonProcessStatus: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ton/process-status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TonApi - functional programming interface
 * @export
 */
export const TonApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TonApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Ton Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tonProcessStatus(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ProcessStatusResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.tonProcessStatus(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TonApi - factory interface
 * @export
 */
export const TonApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TonApiFp(configuration);
  return {
    /**
     *
     * @summary Ton Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tonProcessStatus(options?: any): AxiosPromise<ProcessStatusResponse> {
      return localVarFp
        .tonProcessStatus(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TonApi - object-oriented interface
 * @export
 * @class TonApi
 * @extends {BaseAPI}
 */
export class TonApi extends BaseAPI {
  /**
   *
   * @summary Ton Sync
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TonApi
   */
  public tonProcessStatus(options?: AxiosRequestConfig) {
    return TonApiFp(this.configuration)
      .tonProcessStatus(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
