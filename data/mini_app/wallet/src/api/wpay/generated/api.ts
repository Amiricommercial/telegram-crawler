/* tslint:disable */
/* eslint-disable */
/**
 * Wallet-Pay
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: DEVELOPMENT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InitiatePaymentRestRequest
 */
export interface InitiatePaymentRestRequest {
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof InitiatePaymentRestRequest
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof InitiatePaymentRestRequest
     */
    'telegramBotUsername'?: string;
}
/**
 * 
 * @export
 * @interface MoneyAmountDto
 */
export interface MoneyAmountDto {
    /**
     * 
     * @type {string}
     * @memberof MoneyAmountDto
     */
    'currencyCode': string;
    /**
     * 
     * @type {string}
     * @memberof MoneyAmountDto
     */
    'amount': string;
}
/**
 * Response payload, present if status is SUCCESS
 * @export
 * @interface OrderPaymentDto
 */
export interface OrderPaymentDto {
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'status': OrderPaymentDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'number': string;
    /**
     * 
     * @type {MoneyAmountDto}
     * @memberof OrderPaymentDto
     */
    'amount': MoneyAmountDto;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'storeName': string;
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'expirationDateTime': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentDto
     */
    'returnUrl'?: string;
    /**
     * 
     * @type {PaymentDto}
     * @memberof OrderPaymentDto
     */
    'currentPayment'?: PaymentDto;
}

export const OrderPaymentDtoStatusEnum = {
    Active: 'ACTIVE',
    Expired: 'EXPIRED',
    Paid: 'PAID',
    Cancelled: 'CANCELLED'
} as const;

export type OrderPaymentDtoStatusEnum = typeof OrderPaymentDtoStatusEnum[keyof typeof OrderPaymentDtoStatusEnum];

/**
 * 
 * @export
 * @interface PaymentDto
 */
export interface PaymentDto {
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof PaymentDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentDto
     */
    'status': PaymentDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PaymentDto
     */
    'createdDateTime': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentDto
     */
    'paymentDueDateTime': string;
    /**
     * 
     * @type {Array<PaymentOptionDto>}
     * @memberof PaymentDto
     */
    'paymentOptions': Array<PaymentOptionDto>;
}

export const PaymentDtoStatusEnum = {
    Created: 'CREATED',
    Expired: 'EXPIRED',
    Paying: 'PAYING',
    Failed: 'FAILED',
    Paid: 'PAID',
    ReadyForPayout: 'READY_FOR_PAYOUT'
} as const;

export type PaymentDtoStatusEnum = typeof PaymentDtoStatusEnum[keyof typeof PaymentDtoStatusEnum];

/**
 * 
 * @export
 * @interface PaymentOptionDto
 */
export interface PaymentOptionDto {
    /**
     * 
     * @type {MoneyAmountDto}
     * @memberof PaymentOptionDto
     */
    'amount': MoneyAmountDto;
    /**
     * 
     * @type {string}
     * @memberof PaymentOptionDto
     */
    'exchangeRate': string;
}
/**
 * 
 * @export
 * @interface ProceedPaymentRestRequest
 */
export interface ProceedPaymentRestRequest {
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof ProceedPaymentRestRequest
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof ProceedPaymentRestRequest
     */
    'telegramBotUsername'?: string;
    /**
     * The string representation of Java long value.
     * @type {string}
     * @memberof ProceedPaymentRestRequest
     */
    'paymentId': string;
    /**
     * 
     * @type {string}
     * @memberof ProceedPaymentRestRequest
     */
    'currencyCode': string;
}
/**
 * 
 * @export
 * @interface RestDataResponseGetPaymentStatusPaymentDto
 */
export interface RestDataResponseGetPaymentStatusPaymentDto {
    /**
     * Operation result status, always present
     * @type {string}
     * @memberof RestDataResponseGetPaymentStatusPaymentDto
     */
    'status': RestDataResponseGetPaymentStatusPaymentDtoStatusEnum;
    /**
     * Verbose reason of non-success result
     * @type {string}
     * @memberof RestDataResponseGetPaymentStatusPaymentDto
     */
    'message'?: string;
    /**
     * 
     * @type {PaymentDto}
     * @memberof RestDataResponseGetPaymentStatusPaymentDto
     */
    'data'?: PaymentDto;
}

export const RestDataResponseGetPaymentStatusPaymentDtoStatusEnum = {
    Success: 'SUCCESS',
    AccessDenied: 'ACCESS_DENIED'
} as const;

export type RestDataResponseGetPaymentStatusPaymentDtoStatusEnum = typeof RestDataResponseGetPaymentStatusPaymentDtoStatusEnum[keyof typeof RestDataResponseGetPaymentStatusPaymentDtoStatusEnum];

/**
 * 
 * @export
 * @interface RestDataResponseInitiatePaymentStatusOrderPaymentDto
 */
export interface RestDataResponseInitiatePaymentStatusOrderPaymentDto {
    /**
     * Operation result status, always present
     * @type {string}
     * @memberof RestDataResponseInitiatePaymentStatusOrderPaymentDto
     */
    'status': RestDataResponseInitiatePaymentStatusOrderPaymentDtoStatusEnum;
    /**
     * Verbose reason of non-success result
     * @type {string}
     * @memberof RestDataResponseInitiatePaymentStatusOrderPaymentDto
     */
    'message'?: string;
    /**
     * 
     * @type {OrderPaymentDto}
     * @memberof RestDataResponseInitiatePaymentStatusOrderPaymentDto
     */
    'data'?: OrderPaymentDto;
}

export const RestDataResponseInitiatePaymentStatusOrderPaymentDtoStatusEnum = {
    Success: 'SUCCESS',
    NotActiveOrder: 'NOT_ACTIVE_ORDER',
    AccessDenied: 'ACCESS_DENIED',
    PayerIsNotOrderCustomer: 'PAYER_IS_NOT_ORDER_CUSTOMER',
    TelegramBotUsernameMismatch: 'TELEGRAM_BOT_USERNAME_MISMATCH'
} as const;

export type RestDataResponseInitiatePaymentStatusOrderPaymentDtoStatusEnum = typeof RestDataResponseInitiatePaymentStatusOrderPaymentDtoStatusEnum[keyof typeof RestDataResponseInitiatePaymentStatusOrderPaymentDtoStatusEnum];

/**
 * 
 * @export
 * @interface RestResponseProceedPaymentStatus
 */
export interface RestResponseProceedPaymentStatus {
    /**
     * Operation result status, always present
     * @type {string}
     * @memberof RestResponseProceedPaymentStatus
     */
    'status': RestResponseProceedPaymentStatusStatusEnum;
    /**
     * Verbose reason of non-success result
     * @type {string}
     * @memberof RestResponseProceedPaymentStatus
     */
    'message'?: string;
}

export const RestResponseProceedPaymentStatusStatusEnum = {
    Success: 'SUCCESS',
    Unknown: 'UNKNOWN',
    Expired: 'EXPIRED',
    Failed: 'FAILED',
    AccessDenied: 'ACCESS_DENIED',
    PayerIsNotOrderCustomer: 'PAYER_IS_NOT_ORDER_CUSTOMER',
    TelegramBotUsernameMismatch: 'TELEGRAM_BOT_USERNAME_MISMATCH'
} as const;

export type RestResponseProceedPaymentStatusStatusEnum = typeof RestResponseProceedPaymentStatusStatusEnum[keyof typeof RestResponseProceedPaymentStatusStatusEnum];


/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: async (paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('getPayment', 'paymentId', paymentId)
            const localVarPath = `/wpay/public-api/v1/payment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paymentId !== undefined) {
                localVarQueryParameter['payment-id'] = paymentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InitiatePaymentRestRequest} initiatePaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayment: async (initiatePaymentRestRequest: InitiatePaymentRestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiatePaymentRestRequest' is not null or undefined
            assertParamExists('initiatePayment', 'initiatePaymentRestRequest', initiatePaymentRestRequest)
            const localVarPath = `/wpay/public-api/v1/payment/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initiatePaymentRestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProceedPaymentRestRequest} proceedPaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proceedPayment: async (proceedPaymentRestRequest: ProceedPaymentRestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proceedPaymentRestRequest' is not null or undefined
            assertParamExists('proceedPayment', 'proceedPaymentRestRequest', proceedPaymentRestRequest)
            const localVarPath = `/wpay/public-api/v1/payment/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proceedPaymentRestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayment(paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestDataResponseGetPaymentStatusPaymentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayment(paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InitiatePaymentRestRequest} initiatePaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiatePayment(initiatePaymentRestRequest: InitiatePaymentRestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestDataResponseInitiatePaymentStatusOrderPaymentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiatePayment(initiatePaymentRestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProceedPaymentRestRequest} proceedPaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proceedPayment(proceedPaymentRestRequest: ProceedPaymentRestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseProceedPaymentStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proceedPayment(proceedPaymentRestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment(paymentId: string, options?: any): AxiosPromise<RestDataResponseGetPaymentStatusPaymentDto> {
            return localVarFp.getPayment(paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InitiatePaymentRestRequest} initiatePaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayment(initiatePaymentRestRequest: InitiatePaymentRestRequest, options?: any): AxiosPromise<RestDataResponseInitiatePaymentStatusOrderPaymentDto> {
            return localVarFp.initiatePayment(initiatePaymentRestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProceedPaymentRestRequest} proceedPaymentRestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proceedPayment(proceedPaymentRestRequest: ProceedPaymentRestRequest, options?: any): AxiosPromise<RestResponseProceedPaymentStatus> {
            return localVarFp.proceedPayment(proceedPaymentRestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @param {string} paymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getPayment(paymentId: string, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getPayment(paymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InitiatePaymentRestRequest} initiatePaymentRestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public initiatePayment(initiatePaymentRestRequest: InitiatePaymentRestRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).initiatePayment(initiatePaymentRestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProceedPaymentRestRequest} proceedPaymentRestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public proceedPayment(proceedPaymentRestRequest: ProceedPaymentRestRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).proceedPayment(proceedPaymentRestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


